basePath: /api/v1
definitions:
  dto.CreateTodoRequest:
    properties:
      priority:
        $ref: '#/definitions/dto.Priority'
      task:
        type: string
    required:
    - priority
    - task
    type: object
  dto.Error:
    properties:
      code:
        type: string
      message:
        type: string
    type: object
  dto.Priority:
    enum:
    - low
    - medium
    - high
    type: string
    x-enum-varnames:
    - PriorityLow
    - PriorityMedium
    - PriorityHigh
  dto.ResponseData:
    properties:
      data:
        description: Data is the response data.
    type: object
  dto.ResponseError:
    properties:
      errors:
        description: Errors is the response errors.
        items:
          $ref: '#/definitions/dto.Error'
        type: array
    type: object
  dto.Status:
    enum:
    - created
    - processing
    - done
    type: string
    x-enum-varnames:
    - Created
    - Processing
    - Done
  dto.Todo:
    properties:
      id:
        type: integer
      priority:
        type: string
      status:
        type: string
      task:
        type: string
    type: object
  dto.UpdateTodoRequestBody:
    properties:
      priority:
        $ref: '#/definitions/dto.Priority'
      status:
        $ref: '#/definitions/dto.Status'
      task:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a server for fullstack-examination-2024.
  license:
    name: Apache 2.0
  title: fullstack-examination-2024 API
  version: 0.0.1
paths:
  /healthz:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ResponseData'
      summary: Health check
      tags:
      - health
  /todos:
    get:
      parameters:
      - description: task search by task
        in: query
        name: task
        type: string
      - description: status search by status
        in: query
        name: status
        type: string
      - description: order by asc or desc
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.ResponseData'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.Todo'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseError'
      summary: Find all todos
      tags:
      - todos
    post:
      consumes:
      - application/json
      parameters:
      - description: Create Todo Request Body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateTodoRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Success Response with Todo
          schema:
            allOf:
            - $ref: '#/definitions/dto.ResponseData'
            - properties:
                data:
                  $ref: '#/definitions/dto.Todo'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseError'
      summary: Create a new todo
      tags:
      - todos
  /todos/{id}:
    delete:
      parameters:
      - description: todo id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseError'
      summary: Delete a todo
      tags:
      - todos
    get:
      parameters:
      - description: todo id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success Response with Todo
          schema:
            allOf:
            - $ref: '#/definitions/dto.ResponseData'
            - properties:
                data:
                  $ref: '#/definitions/dto.Todo'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseError'
      summary: Find a todo
      tags:
      - todos
    put:
      consumes:
      - application/json
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateTodoRequestBody'
      - description: todo id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Success Response with Todo
          schema:
            allOf:
            - $ref: '#/definitions/dto.ResponseData'
            - properties:
                data:
                  $ref: '#/definitions/dto.Todo'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseError'
      summary: Update a todo
      tags:
      - todos
schemes:
- http
swagger: "2.0"
